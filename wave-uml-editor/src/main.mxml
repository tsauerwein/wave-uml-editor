<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"  
				xmlns:diagrammer="com.anotherflexdev.diagrammer.*" 
				xmlns:classDiagrammer="de.waveumleditor.view.diagrammer.classDiagram.*"
				layout="absolute" 
				creationComplete="init()">
	<mx:Style source="/de/waveumleditor/view/diagrammer/assets/style/style.css"/>
	
	<mx:Script>
		<![CDATA[
			import de.waveumleditor.view.diagrammer.classDiagram.ClassNode;
			import de.waveumleditor.view.diagrammer.dialogues.EditAttributesWindow;
			import de.waveumleditor.controller.Controller;
			import de.waveumleditor.model.Identifier;
			import de.waveumleditor.model.Position;
			import de.waveumleditor.model.classDiagram.*;
			import de.waveumleditor.model.classDiagram.link.LinkAggregation;
			import de.waveumleditor.model.classDiagram.link.LinkAssociation;
			import de.waveumleditor.model.classDiagram.link.LinkAssociationDirected;
			import de.waveumleditor.model.classDiagram.link.LinkComposition;
			import de.waveumleditor.model.classDiagram.link.LinkImplements;
			import de.waveumleditor.model.classDiagram.link.LinkInheritance;
			
			import mx.containers.TitleWindow;
            import mx.managers.PopUpManager;

			
			private var classOne:ClassNode;
			private var classTwo:ClassNode;
			private var controller:Controller;
			private var classDiagram:ClassDiagram;
			
		private function init():void {
				

				
				var classData:UMLClass = new UMLClass(new Identifier("1234567"), new Position(100, 150), "Klassenname 1");
				var classData2:UMLClass = new UMLClass(new Identifier("12345671"), new Position(400, 150), "Klassenname 2");
				var interfaceData:Interface = new Interface(new Identifier("12345672"), new Position(400, 50), "Superinterface");
				var emptyClass:UMLClass = new UMLClass(new Identifier("12345673"), new Position(100, 50));
				var emptyInterface:Interface = new Interface(new Identifier("12345674"), new Position(250, 50), "");
				
				classData.setAbstract(true);
				
  			 	//Attribut mit Variable: public static int myInteger default=0
				var integerVariable:Variable = new Variable("myInteger", Type.INT, "0");
				var integerAttribute:ClassAttribute = new ClassAttribute(new Identifier("attr001"), integerVariable, EVisibility.PUBLIC);
				
				//Attribut mit Variable: public customType myCustomVariable
				var customVariable:Variable = new Variable("myCustomVariable", (new Type("customType")));
				var customAttribute:ClassAttribute = new ClassAttribute(new Identifier("attr_custom"), customVariable, EVisibility.PUBLIC);
				
				integerAttribute.setStatic(true);
				
 				//Attribut mit Variable: private String myString
				var stringVariable:Variable = new Variable("myString", Type.STRING);
				var stringAttribute:ClassAttribute = new ClassAttribute(new Identifier("attr002"), stringVariable, EVisibility.PRIVATE);  
				
 				classData.addAttribute(integerAttribute);
				classData.addAttribute(stringAttribute);
				classData.addAttribute(customAttribute);
				classData2.addAttribute(integerAttribute);   
				
				//Methode public String getMyString()
				var method:ClassMethod = new ClassMethod(new Identifier("meth004"), "getMyString", EVisibility.PUBLIC, Type.STRING);
				//Konstruktor
				var constructor:ClassConstructorMethod = new ClassConstructorMethod(new Identifier("meth003"), EVisibility.PUBLIC);
				constructor.addVariable(stringVariable);
				
				//Interfacemethode
				var interfaceMethod:InterfaceMethod = new InterfaceMethod(new Identifier("meth005"), "superMethode", Type.DOUBLE);
				interfaceData.addMethod(interfaceMethod);
				//Implementierung der Interfacemethode
				var implementedInterfaceMethod:ClassMethod = new ClassMethod(new Identifier("meth006"), "superMethode",EVisibility.PUBLIC, Type.DOUBLE);
				
				classData.addConstructor(constructor);
				classData.addMethod(method);
				classData2.addMethod(implementedInterfaceMethod);
				classData2.addConstructor(constructor);
				
				var linkInheritance:LinkInheritance = new LinkInheritance(new Identifier("12345681"), classData, classData2);
				var linkImplements:LinkImplements = new LinkImplements(new Identifier("12345682"), classData2, interfaceData);
				var linkAssociation:LinkAssociation = new LinkAssociation(new Identifier("12345683"), classData2, classData2);
				
				/* classOne = new ClassNode();
				classTwo = new ClassNode();
			
				classOne.update(classData);
				classTwo.update(classData2);
			
			var link:Link = new InheritanceLink();
				link.fromNode = classOne;
				link.toNode = classTwo;
				link.fromNode.addLeavingLink(link);
				link.toNode.addArrivingLink(link);
				
				this.diagram.addChild(link.fromNode);
				this.diagram.addChild(link.toNode);
				this.diagram.addChildAt(link, 0);	 */
				
				classDiagram = new ClassDiagram();
				classDiagram.addNode(classData);
				classDiagram.addNode(classData2);
				classDiagram.addNode(emptyClass);
				classDiagram.addNode(emptyInterface);
				classDiagram.addNode(interfaceData);
				classDiagram.addLink(linkInheritance);
				classDiagram.addLink(linkImplements);
				classDiagram.addLink(linkAssociation);
				
				controller = new Controller(diagram, classDiagram);
				controller.createDiagram();
				
				
				//TODO Aufruf des Editieren-Popups auslagern in Kontextmenï¿½
				/* var editAttributes:EditAttributesWindow = new EditAttributesWindow();
				editAttributes.update(classData);
				editAttributes.popUp();  */
				
		}
			
		 /* private function test():void
		{
			var type:Type = new Type("test");
			var variable:Variable = new Variable("test", type);
			var classConstructorMethod:ClassConstructorMethod = new ClassConstructorMethod(EVisibility.PUBLIC);
			var classMethod:ClassMethod = new ClassMethod("test", EVisibility.PUBLIC, type);
			var classAttribute:ClassAttribute = new ClassAttribute(variable, EVisibility.PUBLIC);
			
			var umlclass:UMLClass = new UMLClass(new Position(1, 2), "test");
			var classNode:ClassDiagramNode = new ClassDiagramNode(new Position(1, 1), "test");
			
			var interfaceMethod:InterfaceMethod = new InterfaceMethod("test", type);
			var constantAttribute:ConstantAttribute = new ConstantAttribute(variable);
			
			var linkInheritance:LinkInheritance = new LinkInheritance(classNode, classNode);
 			var linkImplements:LinkImplements = new LinkImplements(classNode, classNode);
 			var linkAssociation:LinkAssociation = new LinkAssociationDirected(classNode, classNode);  
			var linkAgg:LinkAggregation = new LinkAggregation(classNode, classNode);  
			var linkComp:LinkComposition = new LinkComposition(classNode, classNode);  
			
			var classDiagram:ClassDiagram = new ClassDiagram();
		}		  */
		]]>
	</mx:Script>	
	
	<classDiagrammer:ClassDiagramComponent id="diagram" left="0" top="0" bottom="50" right="0">
	</classDiagrammer:ClassDiagramComponent>
</mx:Application>
