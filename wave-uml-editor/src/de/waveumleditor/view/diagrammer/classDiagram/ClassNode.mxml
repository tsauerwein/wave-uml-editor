<?xml version="1.0" encoding="utf-8"?>
<BaseClassDiagramNode xmlns="de.waveumleditor.view.diagrammer.classDiagram.*" xmlns:mx="http://www.adobe.com/2006/mxml" backgroundColor="#8FAEF3" borderColor="#000000">
	<lblNodeName>
		<mx:Text y="0" text="{nodeName}" selectable="false" left="1" right="1" textAlign="center" id="classNodeName" />
	</lblNodeName>

		<mx:Script>
		<![CDATA[
			import mx.controls.Label;
			import org.hamcrest.object.IsEqualMatcher;
			import mx.logging.Log;
			import de.waveumleditor.model.classDiagram.IClassElement;
			import de.waveumleditor.model.classDiagram.ClassDiagramNode;
			import mx.controls.HRule;
			import mx.controls.Text;
			import mx.containers.Grid;
			import mx.core.*;
			import mx.containers.GridRow;
			import mx.messaging.management.Attribute;
			import mx.containers.GridItem;
			import mx.collections.IList;
			import de.waveumleditor.model.classDiagram.UMLClass;
			import de.waveumleditor.model.classDiagram.ClassAttribute;
			
			override public function update(nodeData:ClassDiagramNode):void 
			{
				super.update(nodeData);
				
				if (!(nodeData is UMLClass)) throw new Error("nodeData must be an instance of UMLCLass");
				
				var classData:UMLClass = nodeData as UMLClass;
				
				
				// update class-name
				Formatter.formatLabelOfClassElement(classData, classNodeName);
				nodeName = classData.getName();
				if(nodeName==""){nodeName="Neue Klasse"};//default
				
				// add attributes
				if(classData.getAttributes().length==0)//default
				{
					var defaultAttribute:Label = new Label;
					defaultAttribute.text="Attribute";
					defaultAttributeGridItem.addChild(defaultAttribute);
				}
				var attributes:IList = classData.getAttributes();
				addElementsToContentGrid(attributes, attributeGrid);
		
				// add constructors and methods
				if(classData.getMethods().length==0&&classData.getConstructors().length==0)//default
				{
					var defaultMethod:Label = new Label();
					defaultMethod.text="Methoden";
					defaultMethodGridItem.addChild(defaultMethod);
				}
				//constructors
				var constructors:IList = classData.getConstructors();
				addElementsToContentGrid(constructors, methodGrid);
				//methods
				var methods:IList = classData.getMethods();
				addElementsToContentGrid(methods, methodGrid);
			}
			
			public function addElementsToContentGrid(elements:IList, classDataGrid:Grid):void 
			{
				if(elements.length > 0)
				{
					for(var i:int = 0; i < elements.length; i++)
					{
						var classElement:Object = elements.getItemAt(i);
						classDataGrid.addChild(new ClassNodeElement(classElement as IClassElement));
					}
				}
			}
		]]>
	</mx:Script>
	
	<grids>
		<mx:Grid id="classDataGrid" x="0" y="38" width="100%">
					<mx:GridRow width="100%" height="100%">
						<mx:GridItem width="100%" height="100%">
								<mx:Grid id="attributeGrid"  y="147" width="100%" verticalGap="0">
									<mx:GridRow width="100%" height="100%">
										<mx:GridItem id="defaultAttributeGridItem">
											
										</mx:GridItem>
									</mx:GridRow>
								</mx:Grid>
						</mx:GridItem>
				</mx:GridRow>
				<mx:GridRow width="100%" height="100%">
					<mx:GridItem width="100%" height="100%">
						<mx:HRule x="0" width="100%" shadowColor="#418D8E" strokeColor="#418D8E"/>
					</mx:GridItem>
				</mx:GridRow>
				<mx:GridRow width="100%" height="100%">
						<mx:GridItem width="100%" height="100%">
									<mx:Grid id="methodGrid" y="147" width="100%" verticalGap="0">
										<mx:GridRow width="100%" height="100%">
											<mx:GridItem id="defaultMethodGridItem">
												
											</mx:GridItem>
										</mx:GridRow>
									</mx:Grid>
						</mx:GridItem>
				</mx:GridRow>
			</mx:Grid>
		
	</grids>

</BaseClassDiagramNode>


